#!/usr/bin/env python3
#
# Copyright 2021 University of Edinburgh
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of  nor the names of its contributors may be used to
#    endorse or promote products derived from this software without specific
#    prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import numpy as np
import pickle

# import crocoddyl
import example_robot_data
import rospkg
import rospy
from std_msgs.msg import Empty
from ipab_controller_msgs.msg import EffortFeedforwardWithJointFeedback

# Reference: https://github.com/loco-3d/crocoddyl/blob/master/examples/notebooks/introduction_to_crocoddyl.ipynb
class SoloPlannerPy():
    def __init__(self):
        # Robot Model
        solo12 = example_robot_data.load('solo12')
        robot_model = solo12.model
        # self._croc_state = crocoddyl.StateMultibody(robot_model)
        self._k_p = 3.12
        self._k_d = 0.26172
        # self._robot = Robot()

        # Get path to the trajectory file
        traj_file_path = rospkg.RosPack().get_path('solo_planner_py') + '/resources/ref_traj.p'

        # Load ref data
        self.traj = pickle.load(open(traj_file_path, 'rb'))
        self._xs_ref = self.traj['xs_ref']
        self._us_ref = self.traj['us_ref']

        # Planner Start onoff switch
        # self.onoff = False
        self.onoff = True

        # Trajectory iterator
        self._traj_idx = 0

        # ROS publishers and subscribers
        self.joint_command_pub = rospy.Publisher(
            'solo_controller/joint_command', EffortFeedforwardWithJointFeedback, queue_size=10)
        self.planner_start_sub = rospy.Subscriber(
            'solo_controller/planner_start', Empty, self.planner_start_callback, queue_size = 10)

        # ROS timer
        self.timer = rospy.Timer(rospy.Duration(0.01), self.timer_callback)

    def planner_start_callback(self, data):
        self.onoff = True

    def timer_callback(self, event):
        if self.onoff == True:
            print(self._traj_idx)
            self.step()
            self._traj_idx += 1
            if self._traj_idx == len(self._us_ref):
                self._traj_idx = 0
        else:
            print("Waiting for controller to start")

    def step(self):
        msg = EffortFeedforwardWithJointFeedback()
        msg.positions = self._xs_ref[self._traj_idx][7:19]
        msg.velocities = self._xs_ref[self._traj_idx][25:]
        msg.efforts = self._us_ref[self._traj_idx]
        msg.position_gains = np.ones(12) * self._k_p
        msg.velocity_gains = np.ones(12) * self._k_d
        self.joint_command_pub.publish(msg)

if __name__ == '__main__':
    try:
        rospy.init_node('solo_planner_py')
        solo_planner_py = SoloPlannerPy()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
